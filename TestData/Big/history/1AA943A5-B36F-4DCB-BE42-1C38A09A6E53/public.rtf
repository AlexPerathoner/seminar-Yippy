{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf600
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red69\green187\blue62;\red44\green44\blue44;\red225\green226\blue231;
\red104\green126\blue248;\red93\green216\blue255;\red123\green189\blue243;\red65\green161\blue192;\red255\green100\blue50;
\red20\green201\blue146;}
{\*\expandedcolortbl;;\csgenericrgb\c26985\c73392\c24249;\csgenericrgb\c17255\c17255\c17255;\csgenericrgb\c88217\c88535\c90427;
\csgenericrgb\c40877\c49421\c97255;\csgenericrgb\c36295\c84643\c99897;\csgenericrgb\c48235\c74118\c95294;\csgenericrgb\c25490\c63137\c75294;\csgenericrgb\c100000\c39107\c19529;
\csgenericrgb\c7843\c78940\c57255;}
\deftab593
\pard\tx593\pardeftab593\pardirnatural\partightenfactor0

\f0\fs24 \cf2 \cb3 //\cf4 \
\cf2 //  YippyUITests.swift\cf4 \
\cf2 //  YippyUITests\cf4 \
\cf2 //\cf4 \
\cf2 //  Created by Matthew Davidson on 26/7/19.\cf4 \
\cf2 //  Copyright \'a9 2019 MatthewDavidson. All rights reserved.\cf4 \
\cf2 //\cf4 \
\
\cf5 import\cf4  XCTest\
\cf5 import\cf4  HotKey\
\
\cf5 class\cf4  \cf6 YippyUITests\cf4 : \cf7 XCTestCase\cf4  \{\
\
    \cf5 var\cf4  \cf8 app\cf4 : \cf7 XCUIApplication\cf4 !\
    \
    \cf5 override\cf4  \cf5 func\cf4  \cf8 setUp\cf4 () \{\
        \cf2 // We want to continue after failure because we want a clean exit, so that we can restore the state of the application when quitting. For example, the user defaults.\cf4 \
        \cf7 continueAfterFailure\cf4  = \cf5 true\cf4 \
        \
        \cf2 // Set full access control\cf4 \
        \cf7 AccessControlMock\cf4 .\cf7 setControlGranted\cf4 (\cf5 true\cf4 )\
        \
        \cf2 // UI tests must launch the application that they test. Doing this in setup will make sure it happens for each test method.\cf4 \
        \cf7 app\cf4  = \cf7 XCUIApplication\cf4 ()\
        \cf7 app\cf4 .\cf7 launchArguments\cf4 .\cf7 append\cf4 (\cf9 "--uitesting"\cf4 )\
        \cf7 app\cf4 .\cf7 launchEnvironment\cf4 [\cf9 "SRCROOT"\cf4 ] = \cf7 ProcessInfo\cf4 .\cf7 processInfo\cf4 .\cf7 environment\cf4 [\cf9 "SRCROOT"\cf4 ]\
    \}\
    \
    \cf5 override\cf4  \cf5 func\cf4  \cf8 tearDown\cf4 () \{\
        \cf2 // Quit cleanly\cf4 \
        \cf7 app\cf4 .\cf7 quit\cf4 ()\
    \}\
    \
    \cf5 func\cf4  \cf8 assertCmdV\cf4 () \{\
        \cf5 let\cf4  keyPress = \cf7 KeyPressMock\cf4 .\cf7 handleKeyPress\cf4 ()\
        \cf2 // Assert there was a key press\cf4 \
        \cf7 XCTAssertNotNil\cf4 (keyPress)\
        \cf2 // Assert it was a c + cmd key press\cf4 \
        \cf5 let\cf4  (keyCode, flags) = keyPress!\
        \cf7 XCTAssertEqual\cf4 (keyCode, \cf7 KeyPressMock\cf4 .\cf7 constants\cf4 .\cf7 cKeyCode\cf4 )\
        \cf7 XCTAssertEqual\cf4 (flags, \cf7 KeyPressMock\cf4 .\cf7 constants\cf4 .\cf7 enterEventFlags\cf4 )\
        \cf2 // Assert there was just a single key press\cf4 \
        \cf7 XCTAssertNil\cf4 (\cf7 KeyPressMock\cf4 .\cf7 handleKeyPress\cf4 ())\
    \}\
    \
    \cf5 func\cf4  \cf8 testYippyToggle\cf4 () \{\
        \cf2 // Launch app\cf4 \
        \cf7 app\cf4 .\cf7 launch\cf4 ()\
        \
        \cf2 // Check window isn't displayed\cf4 \
        \cf7 XCTAssertFalse\cf4 (\cf7 app\cf4 .\cf7 yippyWindow\cf4 .\cf7 isDisplayed\cf4 )\
        \
        \cf2 // Toggle window\cf4 \
        \cf7 app\cf4 .\cf7 statusItemButton\cf4 .\cf7 click\cf4 ()\
        \cf7 app\cf4 .\cf7 toggleYippyWindowButton\cf4 .\cf7 click\cf4 ()\
        \
        \cf2 // Check window is displayed\cf4 \
        \cf7 XCTAssertTrue\cf4 (\cf7 app\cf4 .\cf7 yippyWindow\cf4 .\cf7 isDisplayed\cf4 )\
        \
        \cf2 // Toggle window\cf4 \
        \cf7 app\cf4 .\cf7 statusItemButton\cf4 .\cf7 click\cf4 ()\
        \cf7 app\cf4 .\cf7 toggleYippyWindowButton\cf4 .\cf7 click\cf4 ()\
        \
        \cf2 // Check window isn't displayed\cf4 \
        \cf7 XCTAssertFalse\cf4 (\cf7 app\cf4 .\cf7 yippyWindow\cf4 .\cf7 isDisplayed\cf4 )\
    \}\
    \
    \cf5 func\cf4  \cf8 testHotKeyToggle\cf4 () \{\
        \cf2 // Launch app\cf4 \
        \cf7 app\cf4 .\cf7 launch\cf4 ()\
        \
        \cf2 // Check window isn't displayed\cf4 \
        \cf7 XCTAssertFalse\cf4 (\cf7 app\cf4 .\cf7 yippyWindow\cf4 .\cf7 isDisplayed\cf4 )\
        \
        \cf2 // HotKey toggle\cf4 \
        \cf7 app\cf4 .\cf7 pressHotKey\cf4 ()\
        \
        \cf2 // Check window is displayed\cf4 \
        \cf7 XCTAssertTrue\cf4 (\cf7 app\cf4 .\cf7 yippyWindow\cf4 .\cf7 isDisplayed\cf4 )\
        \
        \cf2 // HotKey toggle\cf4 \
        \cf7 app\cf4 .\cf7 pressHotKey\cf4 ()\
        \
        \cf2 // Check window isn't displayed\cf4 \
        \cf7 XCTAssertFalse\cf4 (\cf7 app\cf4 .\cf7 yippyWindow\cf4 .\cf7 isDisplayed\cf4 )\
        \
        \cf2 // HotKey toggle\cf4 \
        \cf7 app\cf4 .\cf7 pressHotKey\cf4 ()\
        \
        \cf2 // Check window is displayed\cf4 \
        \cf7 XCTAssertTrue\cf4 (\cf7 app\cf4 .\cf7 yippyWindow\cf4 .\cf7 isDisplayed\cf4 )\
        \
        \cf2 // Type escape\cf4 \
        \cf7 app\cf4 .\cf7 typeKey\cf4 (\cf7 XCUIKeyboardKey\cf4 .\cf7 escape\cf4 )\
        \
        \cf2 // Check window isn't displayed\cf4 \
        \cf7 XCTAssertFalse\cf4 (\cf7 app\cf4 .\cf7 yippyWindow\cf4 .\cf7 isDisplayed\cf4 )\
    \}\
    \
    \cf5 func\cf4  \cf8 testYippyWindowPositions\cf4 () \{\
        \cf2 // Launch app\cf4 \
        \cf7 app\cf4 .\cf7 launch\cf4 ()\
        \
        \cf2 // Check window isn't displayed\cf4 \
        \cf7 XCTAssertFalse\cf4 (\cf7 app\cf4 .\cf7 yippyWindow\cf4 .\cf7 isDisplayed\cf4 )\
        \
        \cf2 // HotKey toggle\cf4 \
        \cf7 app\cf4 .\cf7 pressHotKey\cf4 ()\
        \
        \cf2 // Check window is displayed\cf4 \
        \cf7 XCTAssertTrue\cf4 (\cf7 app\cf4 .\cf7 yippyWindow\cf4 .\cf7 isDisplayed\cf4 )\
        \
        \cf2 // Check window location is .right\cf4 \
        \cf7 XCTAssertEqual\cf4 (\cf7 app\cf4 .\cf7 yippyWindow\cf4 .\cf7 frame\cf4 .\cf7 midX\cf4 , \cf7 PanelPosition\cf4 .\cf7 right\cf4 .\cf7 frame\cf4 .\cf7 midX\cf4 )\
        \
        \cf2 // Change to position left\cf4 \
        \cf7 app\cf4 .\cf7 statusItemButton\cf4 .\cf7 click\cf4 ()\
        \cf7 app\cf4 .\cf7 positionButton\cf4 .\cf7 click\cf4 ()\
        \cf7 app\cf4 .\cf7 positionLeftButton\cf4 .\cf7 click\cf4 ()\
        \
        \cf2 // Check window location is .left\cf4 \
        \cf7 XCTAssertEqual\cf4 (\cf7 app\cf4 .\cf7 yippyWindow\cf4 .\cf7 frame\cf4 .\cf7 midX\cf4 , \cf7 PanelPosition\cf4 .\cf7 left\cf4 .\cf7 frame\cf4 .\cf7 midX\cf4 )\
        \
        \cf2 // Change to position bottom\cf4 \
        \cf7 app\cf4 .\cf7 statusItemButton\cf4 .\cf7 click\cf4 ()\
        \cf7 app\cf4 .\cf7 positionButton\cf4 .\cf7 click\cf4 ()\
        \cf7 app\cf4 .\cf7 positionBottomButton\cf4 .\cf7 click\cf4 ()\
        \
        \cf2 // Check window location is .bottom\cf4 \
        \cf5 let\cf4  statusBarHeight = \cf7 NSScreen\cf4 .\cf7 main\cf4 !.\cf7 frame\cf4 .\cf7 height\cf4  \cf7 -\cf4  \cf7 NSScreen\cf4 .\cf7 main\cf4 !.\cf7 visibleFrame\cf4 .\cf7 height\cf4 \
        \cf7 XCTAssertEqual\cf4 (\cf7 app\cf4 .\cf7 yippyWindow\cf4 .\cf7 frame\cf4 .\cf7 midY\cf4 , \cf7 NSScreen\cf4 .\cf7 main\cf4 !.\cf7 visibleFrame\cf4 .\cf7 height\cf4  \cf7 +\cf4  statusBarHeight \cf7 -\cf4  \cf7 Constants\cf4 .\cf7 panel\cf4 .\cf7 menuHeight/\cf10 2\cf4 )\
        \
        \cf2 // Change to position top\cf4 \
        \cf7 app\cf4 .\cf7 statusItemButton\cf4 .\cf7 click\cf4 ()\
        \cf7 app\cf4 .\cf7 positionButton\cf4 .\cf7 click\cf4 ()\
        \cf7 app\cf4 .\cf7 positionTopButton\cf4 .\cf7 click\cf4 ()\
        \
        \cf2 // Check window location is .top\cf4 \
        \cf7 XCTAssertEqual\cf4 (\cf7 app\cf4 .\cf7 yippyWindow\cf4 .\cf7 frame\cf4 .\cf7 midY\cf4 , \cf7 Constants\cf4 .\cf7 panel\cf4 .\cf7 menuHeight/\cf10 2\cf4 )\
        \
        \cf2 // Change back to position right\cf4 \
        \cf7 app\cf4 .\cf7 statusItemButton\cf4 .\cf7 click\cf4 ()\
        \cf7 app\cf4 .\cf7 positionButton\cf4 .\cf7 click\cf4 ()\
        \cf7 app\cf4 .\cf7 positionRightButton\cf4 .\cf7 click\cf4 ()\
        \
        \cf2 // Check window location is .right\cf4 \
        \cf7 XCTAssertEqual\cf4 (\cf7 app\cf4 .\cf7 yippyWindow\cf4 .\cf7 frame\cf4 .\cf7 midX\cf4 , \cf7 PanelPosition\cf4 .\cf7 right\cf4 .\cf7 frame\cf4 .\cf7 midX\cf4 )\
    \}\
    \
    \cf5 func\cf4  \cf8 testEmptyYippyHistory\cf4 () \{\
        \cf2 // Empty app support directory\cf4 \
        \cf7 app\cf4 .\cf7 launchArguments\cf4 .\cf7 append\cf4 (\cf9 "--test-dir=Empty"\cf4 )\
        \
        \cf2 // Test no contents on pasteboard\cf4 \
        \cf7 NSPasteboard\cf4 .\cf7 general\cf4 .\cf7 clearContents\cf4 ()\
        \
        \cf2 // Launch app\cf4 \
        \cf7 app\cf4 .\cf7 launch\cf4 ()\
        \
        \cf2 // Open Yippy window\cf4 \
        \cf7 app\cf4 .\cf7 pressHotKey\cf4 ()\
        \
        \cf2 // Check Yippy window displayed with no cells\cf4 \
        \cf7 XCTAssertTrue\cf4 (\cf7 app\cf4 .\cf7 yippyCollectionView\cf4 .\cf7 isDisplayed\cf4 )\
        \cf7 XCTAssertEqual\cf4 (\cf7 app\cf4 .\cf7 yippyCollectionViewItems\cf4 .\cf7 count\cf4 , \cf10 0\cf4 )\
        \
        \cf2 // Close Yippy window\cf4 \
        \cf7 app\cf4 .\cf7 pressHotKey\cf4 ()\
        \
        \cf2 // Copy something\cf4 \
        \cf7 NSPasteboard\cf4 .\cf7 general\cf4 .\cf7 declareTypes\cf4 ([.\cf7 string\cf4 ], owner: \cf5 nil\cf4 )\
        \cf7 NSPasteboard\cf4 .\cf7 general\cf4 .\cf7 setString\cf4 (\cf9 "My first test!"\cf4 , forType: .\cf7 string\cf4 )\
        \
        \cf2 // Show the Yippy window\cf4 \
        \cf7 app\cf4 .\cf7 pressHotKey\cf4 ()\
        \
        \cf2 // Check Yippy window displayed with 1 cell\cf4 \
        \cf7 XCTAssertTrue\cf4 (\cf7 app\cf4 .\cf7 yippyCollectionView\cf4 .\cf7 isDisplayed\cf4 )\
        \cf7 XCTAssertEqual\cf4 (\cf7 app\cf4 .\cf7 yippyCollectionViewItems\cf4 .\cf7 count\cf4 , \cf10 1\cf4 )\
        \cf7 XCTAssertEqual\cf4 (\cf7 app\cf4 .\cf7 getYippyCollectionViewString\cf4 (at: \cf10 0\cf4 ), \cf9 "My first test!"\cf4 )\
    \}\
    \
    \cf5 func\cf4  \cf8 testLoadFromDefinedSettings\cf4 () \{\
        \cf2 // Copy something\cf4 \
        \cf7 NSPasteboard\cf4 .\cf7 general\cf4 .\cf7 declareTypes\cf4 ([.\cf7 string\cf4 ], owner: \cf5 nil\cf4 )\
        \cf7 NSPasteboard\cf4 .\cf7 general\cf4 .\cf7 setString\cf4 (\cf9 "My latest copy"\cf4 , forType: .\cf7 string\cf4 )\
        \
        \cf2 // Set settings environment\cf4 \
        \cf7 app\cf4 .\cf7 launchArguments\cf4 .\cf7 append\cf4 (\cf9 "--Settings.testData=a"\cf4 )\
        \
        \cf2 // Basic app support directory\cf4 \
        \cf7 app\cf4 .\cf7 launchArguments\cf4 .\cf7 append\cf4 (\cf9 "--test-dir=A"\cf4 )\
        \
        \cf2 // Launch app\cf4 \
        \cf7 app\cf4 .\cf7 launch\cf4 ()\
        \
        \cf2 // Open Yippy window\cf4 \
        \cf7 app\cf4 .\cf7 pressHotKey\cf4 ()\
        \
        \cf2 // Check Yippy window displayed with correct number of cells\cf4 \
        \cf7 XCTAssertTrue\cf4 (\cf7 app\cf4 .\cf7 yippyCollectionView\cf4 .\cf7 isDisplayed\cf4 )\
        \cf7 XCTAssertEqual\cf4 (\cf7 app\cf4 .\cf7 yippyCollectionViewItems\cf4 .\cf7 count\cf4 , \cf10 5\cf4 )\
    \}\
    \
    \cf5 func\cf4  \cf8 testEnterToPaste\cf4 () \{\
        \cf2 // Copy something\cf4 \
        \cf7 NSPasteboard\cf4 .\cf7 general\cf4 .\cf7 declareTypes\cf4 ([.\cf7 string\cf4 ], owner: \cf5 nil\cf4 )\
        \cf7 NSPasteboard\cf4 .\cf7 general\cf4 .\cf7 setString\cf4 (\cf9 "My latest copy"\cf4 , forType: .\cf7 string\cf4 )\
        \
        \cf2 // Set settings environment\cf4 \
        \cf7 app\cf4 .\cf7 launchArguments\cf4 .\cf7 append\cf4 (\cf9 "--Settings.testData=a"\cf4 )\
        \
        \cf2 // Basic app support directory\cf4 \
        \cf7 app\cf4 .\cf7 launchArguments\cf4 .\cf7 append\cf4 (\cf9 "--test-dir=A"\cf4 )\
        \
        \cf2 // Launch app\cf4 \
        \cf7 app\cf4 .\cf7 launch\cf4 ()\
        \
        \cf2 // Open Yippy window\cf4 \
        \cf7 app\cf4 .\cf7 pressHotKey\cf4 ()\
        \cf7 app\cf4 .\cf7 typeKey\cf4 (.\cf7 return\cf4 )\
        \
        \cf2 // Assert item was pasted\cf4 \
        \cf7 assertCmdV\cf4 ()\
        \
        \cf2 // Assert the Yippy window is closed\cf4 \
        \cf7 XCTAssertFalse\cf4 (\cf7 app\cf4 .\cf7 yippyWindow\cf4 .\cf7 isDisplayed\cf4 )\
    \}\
    \
    \cf5 func\cf4  \cf8 testPasteFromHistory\cf4 () \{\
        \cf2 // Copy something\cf4 \
        \cf7 NSPasteboard\cf4 .\cf7 general\cf4 .\cf7 declareTypes\cf4 ([.\cf7 string\cf4 ], owner: \cf5 nil\cf4 )\
        \cf7 NSPasteboard\cf4 .\cf7 general\cf4 .\cf7 setString\cf4 (\cf9 "My latest copy"\cf4 , forType: .\cf7 string\cf4 )\
        \
        \cf2 // Set settings environment\cf4 \
        \cf7 app\cf4 .\cf7 launchArguments\cf4 .\cf7 append\cf4 (\cf9 "--Settings.testData=a"\cf4 )\
        \
        \cf2 // Basic app support directory\cf4 \
        \cf7 app\cf4 .\cf7 launchArguments\cf4 .\cf7 append\cf4 (\cf9 "--test-dir=A"\cf4 )\
        \
        \cf2 // Launch app\cf4 \
        \cf7 app\cf4 .\cf7 launch\cf4 ()\
        \
        \cf2 // Open Yippy window\cf4 \
        \cf7 app\cf4 .\cf7 pressHotKey\cf4 ()\
        \cf2 // Select index 2\cf4 \
        \cf7 app\cf4 .\cf7 getYippyCollectionViewCell\cf4 (at: \cf10 2\cf4 ).\cf7 click\cf4 ()\
        \cf7 app\cf4 .\cf7 typeKey\cf4 (.\cf7 return\cf4 )\
        \
        \cf2 // Assert item was pasted\cf4 \
        \cf7 assertCmdV\cf4 ()\
        \
        \cf2 // Assert the Yippy window is closed\cf4 \
        \cf7 XCTAssertFalse\cf4 (\cf7 app\cf4 .\cf7 yippyWindow\cf4 .\cf7 isDisplayed\cf4 )\
        \
        \cf2 // Assert the pasteboard now contains the index 2 text (index 1 in history)\cf4 \
        \cf7 XCTAssertEqual\cf4 (\cf7 NSPasteboard\cf4 .\cf7 general\cf4 .\cf7 string\cf4 (forType: .\cf7 string\cf4 ), \cf9 "2"\cf4 )\
        \
        \cf2 // Open Yippy window\cf4 \
        \cf7 app\cf4 .\cf7 pressHotKey\cf4 ()\
        \
        \cf2 // Check that the items have been shuffled\cf4 \
        \cf7 XCTAssertEqual\cf4 (\cf7 app\cf4 .\cf7 getYippyCollectionViewString\cf4 (at: \cf10 0\cf4 ), \cf9 "2"\cf4 )\
        \cf7 XCTAssertEqual\cf4 (\cf7 app\cf4 .\cf7 getYippyCollectionViewString\cf4 (at: \cf10 1\cf4 ), \cf9 "My latest copy"\cf4 )\
        \cf7 XCTAssertEqual\cf4 (\cf7 app\cf4 .\cf7 getYippyCollectionViewString\cf4 (at: \cf10 2\cf4 ), \cf9 "1"\cf4 )\
    \}\
    \
    \cf5 func\cf4  \cf8 testPasteFromShortcut\cf4 () \{\
        \cf2 // Copy something\cf4 \
        \cf7 NSPasteboard\cf4 .\cf7 general\cf4 .\cf7 declareTypes\cf4 ([.\cf7 string\cf4 ], owner: \cf5 nil\cf4 )\
        \cf7 NSPasteboard\cf4 .\cf7 general\cf4 .\cf7 setString\cf4 (\cf9 "My latest copy"\cf4 , forType: .\cf7 string\cf4 )\
        \
        \cf2 // Set settings environment\cf4 \
        \cf7 app\cf4 .\cf7 launchArguments\cf4 .\cf7 append\cf4 (\cf9 "--Settings.testData=a"\cf4 )\
        \
        \cf2 // Basic app support directory\cf4 \
        \cf7 app\cf4 .\cf7 launchArguments\cf4 .\cf7 append\cf4 (\cf9 "--test-dir=A"\cf4 )\
        \
        \cf2 // Launch app\cf4 \
        \cf7 app\cf4 .\cf7 launch\cf4 ()\
        \
        \cf2 // Open Yippy window\cf4 \
        \cf7 app\cf4 .\cf7 pressHotKey\cf4 ()\
        \cf2 // Use short cut for item index 2 (\uc0\u8984  + 2)\cf4 \
        \cf7 app\cf4 .\cf7 typeKey\cf4 (\cf9 "2"\cf4 , modifierFlags: .\cf7 command\cf4 )\
        \
        \cf2 // Assert item was pasted\cf4 \
        \cf7 assertCmdV\cf4 ()\
        \
        \cf2 // Assert the Yippy window is closed\cf4 \
        \cf7 XCTAssertFalse\cf4 (\cf7 app\cf4 .\cf7 yippyWindow\cf4 .\cf7 isDisplayed\cf4 )\
        \
        \cf2 // Assert the pasteboard now contains the index 2 text (index 1 in history)\cf4 \
        \cf7 XCTAssertEqual\cf4 (\cf7 NSPasteboard\cf4 .\cf7 general\cf4 .\cf7 string\cf4 (forType: .\cf7 string\cf4 ), \cf9 "2"\cf4 )\
        \
        \cf2 // Open Yippy window\cf4 \
        \cf7 app\cf4 .\cf7 pressHotKey\cf4 ()\
        \
        \cf2 // Check that the items have been shuffled\cf4 \
        \cf7 XCTAssertEqual\cf4 (\cf7 app\cf4 .\cf7 getYippyCollectionViewString\cf4 (at: \cf10 0\cf4 ), \cf9 "2"\cf4 )\
        \cf7 XCTAssertEqual\cf4 (\cf7 app\cf4 .\cf7 getYippyCollectionViewString\cf4 (at: \cf10 1\cf4 ), \cf9 "My latest copy"\cf4 )\
        \cf7 XCTAssertEqual\cf4 (\cf7 app\cf4 .\cf7 getYippyCollectionViewString\cf4 (at: \cf10 2\cf4 ), \cf9 "1"\cf4 )\
    \}\
    \
    \cf5 func\cf4  \cf8 testDelete\cf4 () \{\
        \cf2 // Copy something\cf4 \
        \cf7 NSPasteboard\cf4 .\cf7 general\cf4 .\cf7 declareTypes\cf4 ([.\cf7 string\cf4 ], owner: \cf5 nil\cf4 )\
        \cf7 NSPasteboard\cf4 .\cf7 general\cf4 .\cf7 setString\cf4 (\cf9 "My latest copy"\cf4 , forType: .\cf7 string\cf4 )\
        \
        \cf2 // Set settings environment\cf4 \
        \cf7 app\cf4 .\cf7 launchArguments\cf4 .\cf7 append\cf4 (\cf9 "--Settings.testData=a"\cf4 )\
        \
        \cf2 // Basic app support directory\cf4 \
        \cf7 app\cf4 .\cf7 launchArguments\cf4 .\cf7 append\cf4 (\cf9 "--test-dir=A"\cf4 )\
        \
        \cf2 // Launch app\cf4 \
        \cf7 app\cf4 .\cf7 launch\cf4 ()\
        \
        \cf2 // Open Yippy window\cf4 \
        \cf7 app\cf4 .\cf7 pressHotKey\cf4 ()\
        \cf2 // Select index 2\cf4 \
        \cf7 app\cf4 .\cf7 getYippyCollectionViewCell\cf4 (at: \cf10 2\cf4 ).\cf7 click\cf4 ()\
        \cf2 // Delete\cf4 \
        \cf7 app\cf4 .\cf7 typeKey\cf4 (.\cf7 delete\cf4 , modifierFlags: .\cf7 command\cf4 )\
        \
        \cf2 // Check that the item is gone\cf4 \
        \cf7 XCTAssertEqual\cf4 (\cf7 app\cf4 .\cf7 yippyCollectionViewItems\cf4 .\cf7 count\cf4 , \cf10 4\cf4 )\
        \cf7 XCTAssertEqual\cf4 (\cf7 app\cf4 .\cf7 getYippyCollectionViewString\cf4 (at: \cf10 0\cf4 ), \cf9 "My latest copy"\cf4 )\
        \cf7 XCTAssertEqual\cf4 (\cf7 app\cf4 .\cf7 getYippyCollectionViewString\cf4 (at: \cf10 1\cf4 ), \cf9 "1"\cf4 )\
        \cf7 XCTAssertEqual\cf4 (\cf7 app\cf4 .\cf7 getYippyCollectionViewString\cf4 (at: \cf10 2\cf4 ), \cf9 "3"\cf4 )\
        \cf7 XCTAssertEqual\cf4 (\cf7 app\cf4 .\cf7 getYippyCollectionViewString\cf4 (at: \cf10 3\cf4 ), \cf9 "4"\cf4 )\
        \
        \cf2 // Delete again\cf4 \
        \cf7 app\cf4 .\cf7 typeKey\cf4 (.\cf7 delete\cf4 , modifierFlags: .\cf7 command\cf4 )\
        \cf7 app\cf4 .\cf7 typeKey\cf4 (.\cf7 delete\cf4 , modifierFlags: .\cf7 command\cf4 )\
        \
        \cf2 // Check that the items are gone\cf4 \
        \cf7 XCTAssertEqual\cf4 (\cf7 app\cf4 .\cf7 yippyCollectionViewItems\cf4 .\cf7 count\cf4 , \cf10 2\cf4 )\
        \cf7 XCTAssertEqual\cf4 (\cf7 app\cf4 .\cf7 getYippyCollectionViewString\cf4 (at: \cf10 0\cf4 ), \cf9 "My latest copy"\cf4 )\
        \cf7 XCTAssertEqual\cf4 (\cf7 app\cf4 .\cf7 getYippyCollectionViewString\cf4 (at: \cf10 1\cf4 ), \cf9 "1"\cf4 )\
        \
        \cf2 // Delete first item\cf4 \
        \cf7 app\cf4 .\cf7 getYippyCollectionViewCell\cf4 (at: \cf10 0\cf4 ).\cf7 click\cf4 ()\
        \cf7 app\cf4 .\cf7 typeKey\cf4 (.\cf7 delete\cf4 , modifierFlags: .\cf7 command\cf4 )\
        \
        \cf2 // Check that the item is gone\cf4 \
        \cf7 XCTAssertEqual\cf4 (\cf7 app\cf4 .\cf7 yippyCollectionViewItems\cf4 .\cf7 count\cf4 , \cf10 1\cf4 )\
        \cf7 XCTAssertEqual\cf4 (\cf7 app\cf4 .\cf7 getYippyCollectionViewString\cf4 (at: \cf10 0\cf4 ), \cf9 "1"\cf4 )\
        \
        \cf2 // Delete final item\cf4 \
        \cf7 app\cf4 .\cf7 typeKey\cf4 (.\cf7 delete\cf4 , modifierFlags: .\cf7 command\cf4 )\
        \
        \cf2 // Check all items gone\cf4 \
        \cf7 XCTAssertEqual\cf4 (\cf7 app\cf4 .\cf7 yippyCollectionViewItems\cf4 .\cf7 count\cf4 , \cf10 0\cf4 )\
    \}\
\}\
}